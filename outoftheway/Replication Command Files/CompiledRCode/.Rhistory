library("dplyr")
library("lavaan")
library("pscl")
setwd("C:/Users/yxu6/uaa_index/CompiledRCode")
## ## ## ## ## ## ## ## setwd("~/uaa_index/data/Data815")
data = read.csv("storm outcome.csv", na.strings = c("NA",""))
flood.raw = data %>% select(matches("flood.*Instances|flood.*Damage|city|State|Geo"))
data907 = read.csv("data907.csv")
## Data Preprocess, remove columns ##
data_1 = data907 %>%
select(-Name, -SQMI, -State, -County, -edu_12.1)
data_1[,c("Existence_of_drought_management_plans_2015","Existence_of_water_management_plan_2015")] =
apply(data_1[,c("Existence_of_drought_management_plans_2015","Existence_of_water_management_plan_2015")],
2,  function(x) ifelse(x=="Yes", 1,0))
## Transform factors into numerics and remove NA observations ##
## data_1[,"debt"] %<>% lapply(function(x) as.numeric(as.character(x)))
data_1[,"debt"] = as.numeric( levels(data_1[,"debt"])[data_1[,"debt"]])
dim(data_1)
which(rowSums(is.na(data_1)) != 0)
city.geo = data907[,c(2,11:14)]
##colnames(city.geo)[2] = "City"
flood.state.name = state.abb[match(flood.raw[,3],state.name)]
flood.state.name[98] = 'DC'
flood.state.name[213:216] = 'PR'
which(is.na(flood.state.name))
flood.raw[,3] = as.factor(flood.state.name)
colnames(flood.raw)[1] = "Name"
data.merge = merge(flood.raw, city.geo) ##, by = c("Geo_ID"))
flood.combine = cbind(data.merge[,1:3], data.merge[,4:5]+data.merge[,6:7])
str(flood.combine)
head(flood.combine)
trial = merge(data_1[,-7:-8],flood.combine)
head(trial)
str(trial)
trial %>% filter(Flood.Instances == 0)
flood_model = "
expo =~  floodzone_pop+floodzone_build
social =~ a * corruption + b * civ_engage
a + b == 2
sens =~  build_1999+mobile_home
adapt =~  hosp_beds+water_quality
econ =~  debt+incentives_energy
governance =~  patents+global_warming"
drought_model = "
expo =~ a * city_pop
a == 1
social =~ corruption + civ_engage
sens =~  Percentage_of_workforce_in_Farming__Fishing_and_Forestry_2015+Percent_of_GDP_based_on_water_intensive_industries
adapt =~  Existence_of_drought_management_plans_2015+Existence_of_water_management_plan_2015
econ =~  debt+bond_worth+incentives_energy
governance =~  patents+global_warming"
flood_fit = sem(flood_model, data = trial, std.lv= T, std.ov= T, orthogonal = T, missing = "ml")
drought_fit = sem(drought_model, data = data_1, std.lv= T, std.ov= T, orthogonal = T, missing = "ml")
flood_category_score = predict(flood_fit, data_1)
drought_category_score = predict(drought_fit, data_1)
rescale_flood_category_score = apply(scale(flood_category_score), 2, pnorm)
rescale_drought_category_score = apply(scale(drought_category_score), 2, pnorm)
flood_NB = cbind(trial$Flood.Damage, trial$Flood.Instances, rescale_flood_category_score)
damage.per.ins = ifelse(flood_NB[,2] != 0, flood_NB[,1]/(flood_NB[,2]*flood_NB[,3]*data_1$city_pop*0.001), 0)
flood_NB[,1] = round(damage.per.ins)
colnames(flood_NB)[1:2] = c("Damage", "Instances")
flood_NB = as.data.frame(flood_NB) %>% dplyr::select(-Instances)
summary(flood_NB)
direction.flood = expand.grid(c(1,-1),c(1,-1), c(1,-1),c(1,-1),c(1,-1), c(1,-1),0,0,0)
for ( i in 1:64)
{
print(i)
flood_NB2 = cbind(flood_NB[,1], mapply('*',flood_NB[,2:7], direction.flood[i,1:6]))
colnames(flood_NB2)[1] = "Damage"
flood_NB2 = as.data.frame(flood_NB2) %>%
mutate(risk = expo + sens + adapt + length(which(direction.flood[i,c(1,3,4)] == -1))) %>%
mutate(readiness = social + econ + governance + length(which(direction.flood[i, c(2,5,6)] == -1)))
flood_NB_fit = tryCatch( {zeroinfl(Damage~risk + readiness|risk, data = flood_NB2, dist = "negbin", EM = T)},
error = function(c) NA)
if( is.na(flood_NB_fit))
{
direction.flood[i,7:9] = c(NA, NA, NA)
} else
{
direction.flood[i,7:9] = c(flood_NB_fit$coefficients[[1]][2:3], flood_NB_fit$coefficients[[2]][2])
}
}
summary(flood_NB_fit)
colnames(direction.flood) = c("expo", "social", "sens", "adapt", "econ", "governance", "risk1", "readiness", "risk2")
drought_NB = cbind(data_1$Drought.Damage, data_1$Drought.Instances, rescale_drought_category_score)
damage.per.ins = ifelse(drought_NB[,2] != 0, drought_NB[,1]/(data_1$city_pop*0.001), 0)
drought_NB[,1] = round(damage.per.ins)
colnames(drought_NB)[1:2] = c("Damage", "Instances")
drought_NB = as.data.frame(drought_NB) %>% dplyr::select(-Instances)
summary(drought_NB)
direction.drought = expand.grid(c(1,-1),c(1,-1), c(1,-1),c(1,-1),c(1,-1), c(1,-1),0,0,0)
for ( i in 1:64)
{
print(i)
drought_NB2 = cbind(drought_NB[,1], mapply('*',drought_NB[,2:7], direction.drought[i,1:6]))
colnames(drought_NB2)[1] = "Damage"
drought_NB2 = as.data.frame(drought_NB2) %>%
mutate(risk = expo + sens + adapt + length(which(direction.drought[i,c(1,3,4)] == -1))) %>%
mutate(readiness = social + econ + governance + length(which(direction.drought[i, c(2,5,6)] == -1)))
drought_NB_fit = zeroinfl(Damage~risk + readiness|risk, data = drought_NB2, dist = "negbin", EM = T)
summary(drought_NB_fit)
direction.drought[i,7:9] = c(drought_NB_fit$coefficients[[1]][2:3], drought_NB_fit$coefficients[[2]][2])
drought_model = c(drought_model, drought_NB_fit)
}
colnames(direction.drought) = c("expo", "social", "sens", "adapt", "econ", "governance", "risk1", "readiness", "risk2")
flood.select = cbind(na.omit(direction.flood), 0, 0)
for ( i in 1:nrow(flood.select))
{
flood_NB2 = cbind(flood_NB[,1], mapply('*',flood_NB[,2:7], flood.select[i,1:6]))
colnames(flood_NB2)[1] = "Damage"
flood_NB2 = as.data.frame(flood_NB2) %>%
mutate(risk = (expo + sens + adapt + length(which(flood.select[i,c(1,3,4)] == -1)))/3) %>%
mutate(readiness = (social + econ + governance + length(which(flood.select[i, c(2,5,6)] == -1)))/3)
flood_NB_fit = zeroinfl(Damage~risk + readiness|risk, data = flood_NB2, dist = "negbin", EM = T)
flood_NB_predict = predict(flood_NB_fit, flood_NB2[,8:9])
flood_deviance = sum((flood_NB[,1] - flood_NB_predict)^2)
flood_correlation = cor(flood_NB2$risk, flood_NB2$readiness)
flood.select[i, 10:11] = c(flood_deviance, flood_correlation)
}
## flood.select
colnames(flood.select)[10:11] = c("residual_square", "correlation")
flood1 = (flood.select %>% arrange(correlation, residual_square))[1,]
drought.select = cbind(na.omit(direction.drought), 0, 0)
for ( i in 1:nrow(drought.select))
{
drought_NB2 = cbind(drought_NB[,1], mapply('*',drought_NB[,2:7], drought.select[i,1:6]))
colnames(drought_NB2)[1] = "Damage"
drought_NB2 = as.data.frame(drought_NB2) %>%
mutate(risk = (expo + sens + adapt + length(which(drought.select[i,c(1,3,4)] == -1)))/3) %>%
mutate(readiness = (social + econ + governance + length(which(drought.select[i, c(2,5,6)] == -1)))/3)
drought_NB_fit = zeroinfl(Damage~risk + readiness|risk, data = drought_NB2, dist = "negbin", EM = T)
drought_NB_predict = predict(drought_NB_fit, drought_NB2[,8:9])
drought_deviance = sum((drought_NB[,1] - drought_NB_predict)^2)
drought_correlation = cor(drought_NB2$risk, drought_NB2$readiness)
drought.select[i, 10:11] = c(drought_deviance, drought_correlation)
}
## drought.select
colnames(drought.select)[10:11] = c("residual_square", "correlation")
drought1 = (drought.select %>% arrange(correlation, residual_square))[1,]
flood_NB2 = cbind(flood_NB[,1], mapply('*',flood_NB[,2:7], flood1[1,1:6]))
colnames(flood_NB2)[1] = "Damage"
flood_NB2 = as.data.frame(flood_NB2) %>%
mutate(risk = (expo + sens + adapt + length(which(flood1[1,c(1,3,4)] == -1)))/3) %>%
mutate(readiness = (social + econ + governance + length(which(flood1[1, c(2,5,6)] == -1)))/3)
flood_NB_fit = zeroinfl(Damage~risk + readiness|risk, data = flood_NB2, dist = "negbin", EM = T)
flood_NB_predict = predict(flood_NB_fit, flood_NB2[,8:9])
flood_predict_total = flood_NB_predict * flood_NB[,2] * data_1$city_pop * 0.001
flood_NB2 = ifelse(as.matrix(flood_NB2)<0, 1 + as.matrix(flood_NB2), as.matrix(flood_NB2))
flood_NB2[,5] = 1-flood_NB2[,5]
head(flood_NB2)
summary(flood_NB2)
plot(flood_NB2[,8],flood_NB2[,9], main="Flood Correlation", xlab = "risk", ylab = "readiness")
flood_result_export = cbind(trial[,c(44,45,1)],"flood_real"=trial$Flood.Damage/trial$Flood.Instances, "flood_predict"=flood_predict_total)
head(flood_result_export)
length(which(is.na(flood_result_export[,4])))
flood_result_export[which(is.na(flood_result_export[,4])),]
flood.raw[which(is.na(flood_result_export[,4])),]
flood.result.na = flood_result_export[which(is.na(flood_result_export[,4])),]
drought_NB2 = cbind(drought_NB[,1], mapply('*',drought_NB[,2:7], drought1[1,1:6]))
colnames(drought_NB2)[1] = "Damage"
drought_NB2 = as.data.frame(drought_NB2) %>%
mutate(risk = (expo + sens + adapt + length(which(drought1[1,c(1,3,4)] == -1)))/3) %>%
mutate(readiness = (social + econ + governance + length(which(drought1[1, c(2,5,6)] == -1)))/3)
drought_NB_fit = zeroinfl(Damage~risk + readiness|risk, data = drought_NB2, dist = "negbin", EM = T)
drought_NB_predict = predict(drought_NB_fit, drought_NB2[,8:9])
drought_predict_total = drought_NB_predict * data_1$city_pop * 0.001
drought_NB2 = ifelse(as.matrix(drought_NB2)<0, 1 + as.matrix(drought_NB2), as.matrix(drought_NB2))
drought_NB2[,5] = 1-drought_NB2[,5]
head(drought_NB2)
summary(drought_NB2)
plot(drought_NB2[,8],drought_NB2[,9], main="Drought Correlation", xlab = "risk", ylab = "readiness")
drought_geo = left_join(data907[,1:2],trial[,c(44,45,1)],by="Geo_ID") %>% select(-X)
drought_result_export = cbind(drought_geo,drought_NB2, "drought_real"=data_1$Drought.Damage, "drought_predict"=drought_predict_total)
head(drought_result_export)
rm(list=ls())
setwd("C:/Users/yxu6/uaa_index/CompiledRCode")
library(dplyr)
data0 = read.csv("MasterUAA_formated_10_18.csv")
data0[,23] = 100 - data0[,23]
colnames(data0)[23] = "Percent of population with a 12th grade education or higher_2015"
colnamesArray = colnames(data0)
colnamesArray
priorColnames = colnamesArray[12:50]
modification = gsub('.{5}$','', priorColnames)
modification = gsub('_','.',modification)
augmentedColnames = c()
for ( i in 1:length(modification))
{
augmentedColnames = c(augmentedColnames, paste0(modification[i],'_',2010:2015))
}
priorColnames = gsub('_201','.201', priorColnames)
priorColnames = gsub("_",".", priorColnames)
priorColnames = gsub(".201", "_201", priorColnames)
colnames(data0)[12:50] = priorColnames
newData = as.data.frame(matrix(0, 0, length(augmentedColnames) + 11))
colnames(newData) = c( colnames(data0)[1:11], augmentedColnames)
newData[,1:11] =  data0[,1:11]
trial = merge(data0, newData,  all.x = T, all.y = F)[,sort(union(names(data0), names(newData)))]
summary(trial)
trial[is.na(trial)] = ""
dim(trial)
colnames(trial) =  gsub("."," ", colnames(trial), fixed = T)
colnames(trial)
modification = gsub("."," ", modification, fixed = T)
basic = trial %>% select(City,State,'Geo ID')
colnames(basic) = c('city', 'state','geo.id')
setwd("C:/Users/yxu6/uaa_index/CompiledRCode")
setwd("C:/Users/yxu6/uaa_index/CompiledRCode/index")
dir.create("index", showWarnings = FALSE)
setwd("C:/Users/yxu6/uaa_index/CompiledRCode/index")
library(stringr)
for ( i in modification[-c(32,37:39)] )
{
new_indicator = trial %>% select(contains(i,ignore.case = F))
indicator_export = cbind(basic, new_indicator)
if(!dir.exists(i)){
dir.create(i)
}
colnames(indicator_export)[4:9] = str_sub(colnames(indicator_export)[4:9], -4)
write.csv(indicator_export, file = paste0("./",i,"/", "raw_origin.csv"), row.names = F)
}
updated_version = trial %>% select(gsub('.', ' ',colnamesArray[1:11], fixed = T))
updated_version[is.na(updated_version)] = ""
for ( i in modification[-32])
{
print(i)
new_indicator = trial %>% select(contains(i, ignore.case = F))
updated_version = cbind(updated_version, new_indicator)
}
sort(colnames(updated_version))
write.csv(updated_version, "Updated_MasterUAA_formated.csv", row.names = F)
# init currect directory
dir.now <- "C:/Users/yxu6/uaa_index"
setwd(dir.now)
# Add folders if they do not exist
dir.list <- c("UAA", 'logs', 'readiness', 'risk')
lapply(dir.list, dir.create)
# init currect directory
dir.now <- "C:/Users/yxu6/uaa_index/CompiledRCode"
setwd(dir.now)
# Add folders if they do not exist
dir.create("scores", showWarnings = FALSE)
setwd("C:/Users/yxu6/uaa_index/CompiledRCode/scores")
dir.list <- c("UAA", 'logs', 'readiness', 'risk')
lapply(dir.list, dir.create)
source("C:/Users/yxu6/uaa_index/CompliedRCode/R/raw0_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompliedRCode/R/raw0_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompliedRCode/R/raw_data_cleaning.R")
source("C:/Users/yxu6/uaa_index/CompliedRCode/R/input_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompliedRCode/R/score_calculation.R")
source("C:/Users/yxu6/uaa_index/CompliedRCode/R/server_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompliedRCode/R/UAA_scores.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/raw0_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/raw_data_cleaning.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/input_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/score_calculation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/server_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/UAA_scores.R")
# init some paramters
cutoff.p <- 0.0001
this.year <- "2018"
# prepare the raw0
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# prepare the raw0
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# prepare the raw0
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# prepare the raw0
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# init currect directory
dir.now <- "C:/Users/yxu6/uaa_index/CompiledRCode"
# init currect directory
dir.now <- "C:/Users/yxu6/uaa_index/CompiledRCode"
setwd(dir.now)
rm(list=ls())
# init currect directory
dir.now <- "C:/Users/yxu6/uaa_index/CompiledRCode"
setwd(dir.now)
# Add folders if they do not exist
## dir.create("scores", showWarnings = FALSE)
setwd("C:/Users/yxu6/uaa_index/CompiledRCode")
dir.list <- c("UAA", 'logs', 'readiness', 'risk')
lapply(dir.list, dir.create)
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/raw0_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/raw_data_cleaning.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/input_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/score_calculation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/server_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/UAA_scores.R")
# init some paramters
cutoff.p <- 0.0001
this.year <- "2018"
# prepare the raw0
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# prepare the raw0
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# prepare the raw0
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# prepare the raw0
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# prepare the raw0
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# prepare the raw0
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# call the raw data preparation function
raw.cleaning.status <- raw_data_clean(dir.now = dir.now, cutoff.p = cutoff.p, raw0.preparation.status=raw0.preparation.status)
# # check if raw clean status is success. If so, start the input data preparation
input.prep.status <- input_data_prep(dir.now=dir.now, raw.cleaning.status=raw.cleaning.status)
#
# # check if input data preparation is success. If so, start to calculate the scores one by one
score.calculation.status <- score_calculation(dir.now=dir.now, input.prep.status=input.prep.status)
#
# check if the score calculations for each indicator are finished. If so, combine the indicator level score and build ND_GAIN scores
UAA.calculation.status <- UAA.score.calculation(dir.now=dir.now, score.calculation.status=score.calculation.status)
#
# Create resource folder with server data
server_data_preparation(dir.now=dir.now, ND_GAIN.calculation.status=UAA.calculation.status, this.year=this.year)
rm(list=ls())
setwd("C:/Users/yxu6/uaa_index/CompiledRCode")
library(dplyr)
data0 = read.csv("MasterUAA_formated_10_18.csv")
data0[,23] = 100 - data0[,23]
colnames(data0)[23] = "Percent of population with a 12th grade education or higher_2015"
colnamesArray = colnames(data0)
colnamesArray
priorColnames = colnamesArray[12:50]
modification = gsub('.{5}$','', priorColnames)
modification = gsub('_','.',modification)
augmentedColnames = c()
for ( i in 1:length(modification))
{
augmentedColnames = c(augmentedColnames, paste0(modification[i],'_',2010:2015))
}
priorColnames = gsub('_201','.201', priorColnames)
priorColnames = gsub("_",".", priorColnames)
priorColnames = gsub(".201", "_201", priorColnames)
colnames(data0)[12:50] = priorColnames
newData = as.data.frame(matrix(0, 0, length(augmentedColnames) + 11))
colnames(newData) = c( colnames(data0)[1:11], augmentedColnames)
newData[,1:11] =  data0[,1:11]
trial = merge(data0, newData,  all.x = T, all.y = F)[,sort(union(names(data0), names(newData)))]
summary(trial)
## write.csv(trial, "trial.csv")
trial[is.na(trial)] = ""
dim(trial)
colnames(trial) =  gsub("."," ", colnames(trial), fixed = T)
colnames(trial)
modification = gsub("."," ", modification, fixed = T)
basic = trial %>% select(City,State,'Geo ID')
colnames(basic) = c('city', 'state','geo.id')
dir.create("index", showWarnings = FALSE)
setwd("C:/Users/yxu6/uaa_index/CompiledRCode/index")
library(stringr)
for ( i in modification[-c(32,37:39)] )
{
new_indicator = trial %>% select(contains(i,ignore.case = F))
indicator_export = cbind(basic, new_indicator)
if(!dir.exists(i)){
dir.create(i)
}
colnames(indicator_export)[4:9] = str_sub(colnames(indicator_export)[4:9], -4)
write.csv(indicator_export, file = paste0("./",i,"/", "raw_origin.csv"), row.names = F)
}
updated_version = trial %>% select(gsub('.', ' ',colnamesArray[1:11], fixed = T))
updated_version[is.na(updated_version)] = ""
for ( i in modification[-32])
{
print(i)
new_indicator = trial %>% select(contains(i, ignore.case = F))
updated_version = cbind(updated_version, new_indicator)
}
sort(colnames(updated_version))
write.csv(updated_version, "Updated_MasterUAA_formated.csv", row.names = F)
dir.now <- "C:/Users/yxu6/uaa_index/CompiledRCode"
setwd(dir.now)
# Run this for El Capitan to use the xlsx package
# dyn.load('/Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home/lib/server/libjvm.dylib')
# Add folders if they do not exist
## dir.create("scores", showWarnings = FALSE)
setwd("C:/Users/yxu6/uaa_index/CompiledRCode")
dir.list <- c("UAA", 'logs', 'readiness', 'risk')
lapply(dir.list, dir.create)
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/raw0_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/raw_data_cleaning.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/input_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/score_calculation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/server_data_preparation.R")
source("C:/Users/yxu6/uaa_index/CompiledRCode/R/UAA_scores.R")
# init some paramters
cutoff.p <- 0.0001
this.year <- "2018"
raw0.preparation.status <- raw0_data_preparation(dir.now = dir.now)
# call the raw data preparation function
raw.cleaning.status <- raw_data_clean(dir.now = dir.now, cutoff.p = cutoff.p, raw0.preparation.status=raw0.preparation.status)
# # check if raw clean status is success. If so, start the input data preparation
input.prep.status <- input_data_prep(dir.now=dir.now, raw.cleaning.status=raw.cleaning.status)
#
# # check if input data preparation is success. If so, start to calculate the scores one by one
score.calculation.status <- score_calculation(dir.now=dir.now, input.prep.status=input.prep.status)
#
# check if the score calculations for each indicator are finished. If so, combine the indicator level score and build ND_GAIN scores
UAA.calculation.status <- UAA.score.calculation(dir.now=dir.now, score.calculation.status=score.calculation.status)
#
# Create resource folder with server data
server_data_preparation(dir.now=dir.now, ND_GAIN.calculation.status=UAA.calculation.status, this.year=this.year)
